# core python packages
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import ipywidgets
from scipy.constants import mu_0

# SimPEG and related packages
from pymatsolver import Pardiso as Solver
from SimPEG import (
    Mesh, Maps, Utils, DataMisfit, Regularization, Optimization, 
    Inversion, InvProblem, Directives
)
from SimPEG.EM import TDEM
# larger font size for plots
from matplotlib import rcParams
rcParams['font.size']=14
data_directory = os.path.sep.join(["..", "data", "bookpurnong"])
os.listdir(data_directory)
with open(os.path.sep.join([data_directory, "README.txt"]), 'r') as file:
    print(file.read())
    
    # Load SkyTEM 2005
    
skytem = pd.read_table(
    os.path.sep.join([data_directory, "SK655CS_Bookpurnong_ZX_HM_TxInc_newDTM.txt"])
)

list(skytem)  # list the data header
lines = np.unique(skytem.LINE)
skytem.LINE
river_path = np.loadtxt(os.path.sep.join([data_directory, "MurrayRiver.txt"]))
def plot_line(line_number, ax=None):
    """
    A plotting function that will plot all sounding locations for a given `line_number`
    """
    if ax is None:
        fig, ax = plt.subplots(1, 1)
    inds = skytem.LINE == line_number
    ax.plot(skytem.E[inds], skytem.N[inds], '.', ms=0.6)
    return ax
    
   tie_line_inds = (skytem.LINE >= lines[29])

fig, ax = plt.subplots(1, 1)
for l in lines[:29]:
    plot_line(l, ax=ax)
    data_inds = []

for i, head in enumerate(list(skytem)):
    if head.startswith("Z"):
        data_inds.append(i)
easting = skytem.E[~tie_line_inds].values
northing = skytem.N[~tie_line_inds].values
elevation = skytem.LASALT[~tie_line_inds].values
data = skytem.iloc[np.where(~tie_line_inds)[0], data_inds].values
time_channels = np.vstack([
    [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    [470e-7, 598e-7, 726e-7, 886e-7, 1118e-7, 1454e-7, 1852e-7, 2344e-7, 2952e-7, 3706e-7, 4644e-7, 5814e-7, 7278e-7, 9112e-7, 11170e-7, 14292e-7, 17912e-7, 22460e-7, 28174e-7, 35356e-7, 44388e-7, 55750e-7, 7.00e-03, 8.80e-03]
]).T
xloc, yloc = 462100.0, 6196500.0
rxind = np.argmin((easting-xloc)**2+(northing-yloc)**2)
fig, ax = plt.subplots(1, 1)

ax.loglog(time_channels[:, 1], data[rxind, :], 'o')
ax.set_xlabel("time (s)")
ax.set_ylabel("db$_z$ / dt (V / Am$^4$)")
ax.grid("k", alpha=0.5)
cs, ncx, ncz, npad = 1., 10., 10., 20
hx = [(cs, ncx), (cs, npad, 1.3)]
npad = 12

log_spaced_z_cells = np.logspace(np.log10(1.), np.log10(12.), 19)
z_padding = log_spaced_z_cells[-1] * 1.3 ** np.arange(npad)
hz = np.r_[z_padding[::-1], log_spaced_z_cells[::-1], log_spaced_z_cells, z_padding]
mesh = Mesh.CylMesh([hx, 1, hz], '00C')
active = mesh.vectorCCz < 0.
sig_half = 1e-1
sig_air = 1e-8
active_inds = mesh.vectorCCz < 0.
active_map = Maps.InjectActiveCells(mesh, active_inds, np.log(sig_air), nC=mesh.nCz)
mapping = Maps.ExpMap(mesh) * Maps.SurjectVertical1D(mesh) * active_map
m0 = np.ones(active_inds.sum())*np.log(sig_half)
waveform = np.vstack([
    np.r_[-10, -9.29, -8.41, -7.26, -5.28, -3.62, -2.33, -0.62, 0.00, 0.0266, 0.0276, 0.0286, 10.000]*1e-3,
    np.r_[0, 20, 40, 60, 80, 90, 95, 99, 100, 1.53, 0.566, 0.000, 0.000]/100.
]).T
t0 = -1*waveform[0, 0]
src_waveform = TDEM.Src.VTEMWaveform(a=3., peakTime=t0, offTime=t0+29e-6)
waveform[:, 0]+t0
area = 313.98
radius = np.sqrt(area/np.pi)
system_height = elevation[rxind]
rxloc = np.array([[radius, 0., system_height]])
# The data are secondary field data
dbdtz = TDEM.Rx.Point_dbdt(
    rxloc,
    orientation='z',
    times=time_channels[:-3, 1] + t0
)
times = time_channels[:-3, 1] + t0
src_list = [
    TDEM.Src.CircularLoop(
        [dbdtz], loc=np.r_[0., 0., system_height], radius=radius,
        orientation='z',
        waveform=src_waveform, 
        current=1./area  # the data are normalized by loop area
    )
]
timeSteps = [
    (src_waveform.peakTime/3, 3), ((src_waveform.offTime-src_waveform.peakTime)/2, 2),
    (1e-5, 5), (5e-5, 5), (1e-4, 10), (5e-4, 15)
]
problem = TDEM.Problem3D_e(
    mesh, timeSteps=timeSteps, sigmaMap=mapping, Solver=Solver
)
survey = TDEM.Survey(src_list)
problem.pair(survey)
std = 0.05
floor = 1e-12
dobs = data[rxind, :-3]  # ignore the last three time-channels
uncert = abs(dobs) * std + floor
np.save('dobs_3d',dobs)
%time
dpred_0 = survey.dpred(m0)
np.save('dpred_3d',dpred_0)
fig, ax = plt.subplots(1, 1)

ax.loglog(time_channels[:-3, 1], dobs, "C0s", label="dobs")
plt.errorbar(time_channels[:-3, 1], dobs, yerr=uncert, color="C0")
ax.loglog(time_channels[:-3, 1], -dpred_0, "C1", label="dpred")

ax.grid('k', alpha=0.5)
ax.legend()
